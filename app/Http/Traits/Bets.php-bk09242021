<?php
namespace App\Http\Traits;
use DB;
trait Bets {

	public function getBetData($request){

        $bets   =    [];
        $sort   =    $request->input('sort') == "" ? 'created_at' : $request->input('sort');
        $order  =    $request->input('order', 'desc');
        $from   =    date('Y-m-d h:i:s', strtotime($request->input('filters.from')));
        $to     =    date('Y-m-d h:i:s', strtotime($request->input('filters.to'))) ?? $from;
      

        $data = DB::table('bets as bet')
        ->leftJoin('fights as fight', 'fight.id', '=', 'bet.fight_id')
        ->leftJoin('arenas as arena', 'arena.id', '=', 'fight.arena_id')
        ->leftJoin('users as user', 'user.id', '=', 'bet.user_id')
        ->selectRaw('
            bet.bet_date,
            bet.pick,
            bet.odds,
            bet.amount,
            bet.prize,
            bet.result,
            bet.result_date,
            arena.name as arena,
            fight.fight_no as fight_no,
            user.name as name
        ')
        // ->when($sort, function($query, $sort) use ($order){
        //     return $query->orderBy('bet.'.$sort, $order);
        // })
        // ->when($from, function ($query , $from) use ($to) {
        //     return $query->whereBetween('bet.bet_date', [$from, $to]);
        // })
        ->whereNull('bet.deleted_at')
        ->get();


        foreach($data as $key => $val){
            
            $bets[$key] = [
                'year'          => date('Y', strtotime($val->bet_date)),
                'month'         => date('F', strtotime($val->bet_date)),
                'day'           => date('j', strtotime($val->bet_date)),
                'month_and_day' => date('F', strtotime($val->bet_date)).' '.date('j', strtotime($val->bet_date)),
                'time'          => date('H:i:s', strtotime($val->bet_date)),
                'arena'         => $val->arena,
                'fight_no'      => $val->fight_no,
                'account'       => $val->name,
                "pick"          => $val->pick,
                "odds"          => $val->odds,
                "bet_amount"    => $val->amount,
                "prize"         => $val->prize,
                "result"        => $val->result,
                "bet_date"      => $val->bet_date,
                "result_date"   => $val->result_date,

            ];
        }

        $collection = collect($bets);

        return $collection;
    }

    public function showTotalBets($bets,$view,$dashboardView){


        $totalBetsPerYear       = $bets->groupBy('year')->map->count();
        $totalAmountBetsPerYear = $bets->groupBy('year')->map(function($perYear){
            return $perYear->sum('bet_amount');
        });

        
        $totalAmountBetsPerArena = $bets->groupBy('arena')->map(function($perYear){
            return $perYear->sum('bet_amount');
        });

        $totalNumberBetsPerMonth = $bets->groupBy('year')->map(function($data,$year){
             return $data->groupBy('month')->map(function($permonth){
                return $permonth->count();
             });
        });

        
      
        $totalNumberBetsPerDay = $bets->groupBy('year')->map(function($data,$year){
             return $data->groupBy('month_and_day')->map(function($permonth){
                return $permonth->count();
             });
        });

  
        $totalNumberBetsPerArena        = $bets->groupBy('arena')->map->count();
        
        $yearAndTotalAmountBetsPerMonth = $bets->groupBy('year')->map(function($data,$year){
             return $data->groupBy('month')->map(function($permonth){
                return $permonth->sum('bet_amount');
             });
        });

        $yearAndTotalAmountBetsPerDay = $bets->groupBy('year')->map(function($data,$year){
             return $data->groupBy('month_and_day')->map(function($permonth){
                return $permonth->sum('bet_amount');
             });
        });
      
        if($dashboardView == true){
            
            $totalBetsPerYear = $this->formatBar($totalBetsPerYear);
            $totalAmountBetsPerYear = $this->formatBar($totalAmountBetsPerYear);
            $totalAmountBetsPerArena = $this->formatBar($totalAmountBetsPerArena);

            $totalNumberBetsPerMonth = $this->formatLine($totalNumberBetsPerMonth);
            $totalNumberBetsPerDay = $this->formatLine($totalNumberBetsPerDay);
            $yearAndTotalAmountBetsPerMonth = $this->formatLine($yearAndTotalAmountBetsPerMonth);
            $yearAndTotalAmountBetsPerDay = $this->formatLine($yearAndTotalAmountBetsPerDay);
            
            $totalNumberBetsPerArena = $this->formatPie($totalNumberBetsPerArena);
            
            $view = 'dashboard.finance.total-bets';
        }

        return view($view,compact(

            'bets',
            'totalAmountBetsPerYear',
            'totalAmountBetsPerArena',
            'yearAndTotalAmountBetsPerMonth',
            'yearAndTotalAmountBetsPerDay',
            'totalNumberBetsPerMonth',
            'totalBetsPerYear',
            'totalNumberBetsPerDay',
            'totalNumberBetsPerArena',
            
        ));
    }


    public function searchFilterByDate($request){

        $type       =    $request->input('group'); // select type if daily/montly/yearly
        $limit      =    intval($request->input('limit', 10)); // pagination
        $offset     =    intval($request->input('offset', 0)); // pagination
        $collection =    $this->getBetData($request); //getBetData
        $rows       =    []; // all array result to be display in data tables
        $chartView  =    $request->input('chart');

        // filter collections group by daily/monthly/yearly
        switch($type){
            case 'daily':
                $groupDate = $collection->groupBy('year')->map(function($data,$year){
                    return $data->groupBy('month_and_day')->map(function($perday){
                       return [ 'count' => $perday->count(), 'sum' => $perday->sum('bet_amount')];
                    });
                });       
              
                // create array format to show date and count for table rows
                foreach($groupDate as $key => $val){
                    foreach($val as $keyDate => $valCount){
                   
                        $rows[] = [
                            'date'  => $keyDate.', '.$key,
                            'count' => $valCount['count'],
                            'sum'   => '₱ '.number_format($valCount['sum'],2)
                        ];
                    }
                }
                break;
            case 'monthly';
                $groupDate = $collection->groupBy('year')->map(function($data,$year){
                    return $data->groupBy('month')->map(function($permonth){
                        return [ 'count' => $permonth->count(), 'sum' => $permonth->sum('bet_amount')];
                    });
                });
                // create array format to show date and count for table rows
                foreach($groupDate as $key => $val){
                    foreach($val as $keyDate => $valCount){
                        $rows[] = [
                            'date'  => $keyDate.' '.$key,
                            'count' => $valCount['count'] ?? null,
                            'sum'   => '₱ '.number_format($valCount['sum'] ?? null,2)
                        ];
                    }
                }
                break;
            case 'yearly';
                $groupDate = $collection->groupBy('year')->map(function($peryear){
                    return [ 'count' => $peryear->count(), 'sum' => $peryear->sum('bet_amount')];
                });
                // create array format to show date and count for table rows
                foreach($groupDate as $key => $val){
                    $rows[] = [
                        'date'  => $key,
                        'count' => $val['count'],
                        'sum'   => '₱ '.number_format($val['sum'],2)
                    ];
                }
                break;
            default:
                $groupDate = $collection->groupBy('year')->map(function($data,$year){
                    return $data->groupBy('month_and_day')->map(function($perday){
                        return [ 'count' => $perday->count(), 'sum' => $perday->sum('bet_amount')];
                    });
                }); 
                // create array format to show date and count for table rows
                foreach($groupDate as $key => $val){
                    foreach($val as $keyDate => $valCount){
                        $rows[] = [
                            'date'  => $keyDate.', '.$key,
                            'count' => $valCount['count'],
                            'sum'   => '₱ '.number_format($valCount['sum'],2)
                        ];
                    }
                }
        }

        //determine offset and limit of rows for pagination
        $result      = array_slice($rows,intval($request->input('offset', 0)),intval($request->input('limit', 10)));
        $countRows   = count($rows);

        return [
            'rows'                  =>   $result,
            'total'                 =>   $countRows,
            'totalNotFiltered'      =>   $countRows,
            'chartBar'              =>   $this->formatBar($rows),
        ];
    }
}